apply plugin: 'com.android.application'


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}


def apikeyPropertiesFile = rootProject.file("keys.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))


android {
    namespace 'com.cherrydev.airsend'

    signingConfigs {
        release {
            storeFile file(String.valueOf(System.getenv("KEYSTORE_PATH_ASAKS")))
            storePassword apikeyProperties['keystorePw']
            keyPassword apikeyProperties['keyPw']
            keyAlias 'key0'
        }
    }
    compileSdkVersion 33
    buildToolsVersion '33.0.1'

    defaultConfig {
        configurations.all {
            resolutionStrategy { force 'androidx.core:core:1.6.0' }
        }
        applicationId "com.cherrydev.airsend"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 8
        versionName "8.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        buildConfigField("String", "CERT_KEY", apikeyProperties['CERT_KEY'])

        testOptions {
        // so espresso doesn't wait arbitrary amount of time and crash
            animationsDisabled = true
        }
    }

    buildTypes {
        debug {
            signingConfig debug.signingConfig

            // this enables instrumented test coverage reporting
            testCoverageEnabled = true

            //debuggable true
            shrinkResources false
            minifyEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests.all {
            useJUnitPlatform()
        }
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    buildFeatures {
        viewBinding true
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    coreLibraryDesugaring libs.desugar.jdk.libs

    implementation project(":AirSendCore")

    // region shared libraries
    implementation libs.common
    implementation libs.dialogs
    implementation libs.file
    implementation libs.keyboard
    implementation libs.time
    // endregion

    implementation(libs.commons.lang3)


    implementation libs.constraintlayout
    implementation libs.appcompat
    implementation libs.legacy.support.v4
    implementation libs.lifecycle.livedata
    implementation libs.lifecycle.viewmodel
    implementation libs.androidx.navigation.fragment
    implementation libs.navigation.ui


    //region  *******************************
    implementation 'xmlpull:xmlpull:1.1.3.4d_b4_min'


    testImplementation "org.junit.vintage:junit-vintage-engine:5.7.1"


    // jUnit
    def jupiter = '5.7.1'
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter"
    androidTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
    androidTestImplementation 'junit:junit:4.13.2'


    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter'


    //mocking, commented out to prevent double import of one file (cant mock in instrumentation with the commented items)
//    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
//    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9'
//    testImplementation 'org.powermock:powermock-api-mockito:1.7.4'
//    testImplementation 'org.powermock:powermock-classloading-xstream:2.0.9'
////    testImplementation 'org.mockito:mockito-core:3.11.0'
//    androidTestImplementation 'org.powermock:powermock-api-mockito:1.7.4'
//    androidTestImplementation 'org.powermock:powermock-classloading-xstream:2.0.9'
//    androidTestImplementation 'org.powermock:powermock-module-junit4:2.0.9'
//    androidTestImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9'

    androidTestImplementation "org.mockito:mockito-core:3.11.0"
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.25.0'


    //androidx test
    testImplementation('androidx.test:core:1.4.0') {
        exclude group: 'xpp3', module: 'xpp3'
    }
    androidTestImplementation('androidx.test:core:1.4.0') {
        exclude group: 'xpp3', module: 'xpp3'
    }

    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'


    //testing framework
    // well, cannot run Espresso because of these imports. https://stackoverflow.com/a/63768995/4673960 .
    // Should not be throwing errors, but it is.
    //testImplementation "org.robolectric:robolectric:4.5.1"
//    androidTestImplementation ("org.robolectric:robolectric:4.5.1") {
//        exclude group: "org.apache.maven.wagon"
//        exclude group: "org.apache.maven"
//    }
    androidTestImplementation 'org.hamcrest:hamcrest-library:2.2'


    //truth, assertions
    androidTestImplementation libs.androidx.truth
    testImplementation libs.google.truth


    // Espresso dependencies
     androidTestImplementation libs.bundles.espresso



    //endregion *******************************


    implementation 'com.google.android.material:material:1.3.0'


    implementation 'androidx.fragment:fragment:1.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'


    def lifecycle_version = "2.2.0"
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.viewmodel.savedstate


    implementation 'com.google.android.gms:play-services-vision:20.1.3'


    implementation 'com.github.kenglxn.QRGen:android:2.6.0'


    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.github.T-Spoon:Benchit:v1.0.2'


    //for TLS 1.3 on Android versions < 29
    implementation 'org.conscrypt:conscrypt-android:2.5.1'
    implementation 'com.google.android.gms:play-services-auth:20.0.1'


    def room_version = "2.5.0"
    implementation libs.androidx.room.runtime
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation libs.androidx.room.rxjava3


    implementation libs.rxandroid
//     Because RxAndroid releases are few and far between, it is recommended you also
//     explicitly depend on RxJava's latest version for bug fixes and new features.
//     (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)
    implementation libs.rxjava
    implementation libs.rxbinding


    implementation("com.google.guava:guava:31.0.1-android")



}

